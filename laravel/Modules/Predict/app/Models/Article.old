<?php

declare(strict_types=1);

namespace Modules\Predict\Models;

use Illuminate\Database\Eloquent\Relations\MorphMany;
use Modules\Blog\Models\Article as BaseArticle;
use Modules\Rating\Models\RatingMorph;

class Article extends BaseArticle
{
    /** @var string */
    protected $connection = 'predict'; // this will use the specified database connection

    public function orders(): MorphMany
    {
        return $this->morphMany(Order::class, 'model');
    }

    public function getBettingUsers(): int
    {
        return count(RatingMorph::where('model_id', $this->id)
            ->where('user_id', '!=', null)
            ->groupBy('user_id')
            ->get()
            ->toArray());
    }

    public function getVolumeCredit(?int $rating_id = null): float
    {
        $ratings = RatingMorph::where('model_id', $this->id)
            ->where('user_id', '!=', null);

        if (null !== $rating_id) {
            $ratings = $ratings->where('rating_id', $rating_id);
        }

        $ratings = $ratings->get();

        $tmp = 0;

        foreach ($ratings as $rating) {
            $tmp += $rating->value;
        }

        return (int) $tmp;
    }

    public function getRatingsPercentageByVolume(): array
    {
        $ratings_options = $this->getOptionRatingsIdTitle();
        $result = [];

        $total_volume = $this->getVolumeCredit();
        if (0 == $total_volume) {
            $total_volume = 1;
        }

        foreach ($ratings_options as $key => $value) {
            $result[$key] = round(($this->getVolumeCredit($key) * 100) / $total_volume, 0);
        }

        return $result;
    }
}
