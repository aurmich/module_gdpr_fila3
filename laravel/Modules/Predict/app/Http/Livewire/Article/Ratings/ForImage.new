<?php

declare(strict_types=1);

namespace Modules\Blog\Http\Livewire\Article\Ratings;

use Filament\Forms\Set;
use Livewire\Component;
use Filament\Forms\Form;
use Filament\Pages\Page;
use Livewire\Attributes\On;
use Filament\Facades\Filament;
use Modules\Blog\Models\Article;
use Filament\Tables\Actions\Action;
use Filament\Forms\Components\Select;
use Filament\Forms\Contracts\HasForms;
use Modules\Xot\Actions\GetViewAction;
use Filament\Forms\Components\TextInput;
use Modules\Blog\Datas\RatingArticleData;
use Modules\Blog\Aggregates\ArticleAggregate;
use Filament\Forms\Concerns\InteractsWithForms;

class ForImage extends Page implements HasForms
{
    use InteractsWithForms;
    public Article $article;

    public string $tpl = 'v1';

    public string $rating_title = '';
    public int $rating_id = 0;
    public array $article_ratings = [];
    public int $import = 0;
    public array $data = [];

    protected static ?string $navigationIcon = 'heroicon-o-document-text';

    public function mount(Article $article, string $tpl = 'v1'): void
    {
        $this->article = $article;
        $this->tpl = $tpl;
        $this->article_ratings = $article->getOptionRatingsIdTitle();

        $data = [];
        $data['ratings'] = $this->article_ratings;
        $data['import'] = $this->import;

        $this->form->fill($data);
    }

    public function form(Form $form): Form
    {
        // $ratings = $this->article
        //     ->ratings()
        //     ->where('user_id', null)
        //     ->distinct()
        //     ->get();

        $schema = [];

        $schema[] = Select::make('ratings')
            ->options($this->article_ratings)
            // ->label('Your bet '.$this->rating_title)
            ->label('')
            // ->extraInputAttributes(['class' => 'py-2 text-sm text-gray-700 dark:text-gray-200'])
            // ->afterStateUpdated(fn (Set $set, ?string $state) => $set('slug', Str::slug($state)))
            ->afterStateUpdated(function(?string $state){
                // dddx([$set, $state]);
                // $this->rating_id = (int ) $state;
                // $this->rating_title = $this->article_ratings[$state];

                $this->updateRating((int) $state, $this->article_ratings[$state]);
                // $this->fillForm();
                // $set('slug', Str::slug($state));
            })
            ->live()
            ;


        $schema[] = TextInput::make('import')
            ->label('')
            // ->suffix(fn () => Arr::get($this->data, 'ratings.'.$rating->id.'.value', 0))
            // ->disabled()
            ->live()
            ;



        /*
        $schema[] = TextInput::make('ratings.'.$rating->id.'.value')
            ->label($rating->title.' tot ')
            ->extraInputAttributes(['class' => 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-700 focus:ring-green-700 sm:text-sm'])
            ->disabled();
        */
        /*
        $schema[]=TextInput::make('ratings_add.'.$rating->id.'.id')
            ->default($rating->id);
        */
        // $schema[] = TextInput::make('ratings_add.'.$rating->id.'.value')
        //     ->label($rating->title)
        //     ->suffix(fn () => Arr::get($this->data, 'ratings.'.$rating->id.'.value', 0))
            // ->extraInputAttributes(['class' => 'mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-700 focus:ring-green-700 sm:text-sm'])
            // ->disabled()
        ;


        // dddx($schema);
        return $form
            ->schema($schema)
            ->statePath('data');
    }

    public function url(string $name, array $params): string
    {
        return '#';
    }

    protected function getFormActions(): array
    {
        return [
            Action::make('save')
                ->label(__('filament-panels::resources/pages/edit-record.form.actions.save.label'))
                ->submit('save'),
        ];
    }


    public function render(): \Illuminate\Contracts\View\View
    {
        /** @phpstan-var view-string */
        $view = app(GetViewAction::class)->execute($this->tpl);

        $view_params = [
            'view' => $view,
            'ratingTitle' => $this->rating_title,
            // 'chosen_bet_title' => $this->chosen_bet['rating_title'] ?? 'aaaaaaaa'
        ];

        return view($view, $view_params);
    }

    #[On('bet-created')]
    public function updateRating(
        int $rating_id,
        string $rating_title): void
    {
        $this->rating_id = $rating_id;
        $this->rating_title = $rating_title;
    }

    public function save(): void
    {
        // dddx([
        //     $this->rating_id,
        //     $this->rating_title,
        //     $this->import,
        //     $this->form->getState()
        // ]);

        $data = $this->form->getState();


        $article_aggregate = ArticleAggregate::retrieve($this->article->id);
        if (0 != $data['import'] && 0 != $data['ratings']) {
            $command = RatingArticleData::from([
                'userId' => (string) Filament::auth()->id(),
                'articleId' => $this->article->id,
                'ratingId' => $this->rating_id,
                'credit' => $data['import'],
            ]);

            $article_aggregate->rating($command);
        }

        $this->rating_id = 0;
        $this->rating_title = '';
        $this->import = 0;


        dddx([
            $this->form,
            $this->form->getComponent('Select'),
            get_class_methods($this->form)
        
        ]);

        // $this->form->fill(); 

        // $this->reset('data.ratings', 'data.import'); 

        // dddx([
        //     $this->rating_id,
        //     $this->rating_title,
        //     $this->import
        // ]);
    }
}
